name: Build and Deploy
on:
  workflow_call:
    inputs:
      environment:
        description: "Select deployment environment"
        required: true
        type: string
      build-and-deploy-role:
        description: "Developer role used to deploy the environment"
        required: true
        type: string
      update-ecs-role:
        description: "Developer role used to update the ecs task definition"
        required: true
        type: string
      ecr-repository:
        description: "Name of the ecr repository for the build image"
        required: true
        type: string
      account-id:
        description: "Id of the AWS account containing the target environment"
        required: true
        type: string
    secrets:
      ONE_LOGIN_PRIVATE_KEY:
        required: true
      ONE_LOGIN_PUBLIC_KEY:
        required: true
      NOTIFY_KEY:
        required: true
      SLACK_WEBHOOK:
        required: true

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: "eu-west-2"
    outputs:
      image_name: ${{ steps.build-image.outputs.image_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 17
          cache: 'gradle'

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run build

      - name: Run gradle `check` to run linting and tests
        env:
          ONE_LOGIN_PRIVATE_KEY: |
            ${{ secrets.ONE_LOGIN_PRIVATE_KEY }}
          ONE_LOGIN_PUBLIC_KEY: |
            ${{ secrets.ONE_LOGIN_PUBLIC_KEY }}
          EMAILNOTIFICATIONS_APIKEY: ${{ secrets.NOTIFY_KEY }}
        run: ./gradlew clean check --no-daemon

      - name: Get latest version tag for minor version
        id: get-latest-tag
        uses: oprypin/find-latest-tag@v1
        with:
          repository: communitiesuk/prsdb-webapp
          prefix: 'v0.'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.build-and-deploy-role }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          IMAGE_TAG: "${{ steps.get-latest-tag.outputs.tag }}-${{ github.sha }}"
        run: |
          ./gradlew bootBuildImage
          IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag prsdb-webapp:latest $IMAGE
          docker push $IMAGE
          echo "image_name=$IMAGE" >> $GITHUB_OUTPUT

  update-task-definition:
    name: Update task definition
    needs: build-and-deploy
    permissions:
      id-token: write
      contents: read
    uses: communitiesuk/prsdb-infra/.github/workflows/update-task-definition.yml@main
    with:
      environment_name: ${{ inputs.environment }}
      account_id: ${{ inputs.account-id }}
      image_name: ${{ needs.build-and-deploy.outputs.image_name }}

  update-ecs-service:
    name: Update ECS service
    needs: update-task-definition
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: "eu-west-2"
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume:  ${{ inputs.update-ecs-role }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Redeploy ECS service
        run: |
          aws ecs update-service --cluster ${{ inputs.environment }}-app --service ${{ inputs.environment }}-app --task-definition prsdb-webapp-${{ inputs.environment }} --force-new-deployment
  
  report-pipeline-status:
    runs-on: ubuntu-latest
    needs: update-ecs-service
    steps:
      - name: Report pipeline status
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "commit": ${{ toJson(github.event.head_commit.message) }},
              "result": "${{ (needs.update-ecs-service.result == 'success' || needs.update-ecs-service.result == 'skipped') && 'Success :tick:' || 'Failure :no-cross:' }}",
              "url": "${{ format('https://github.com/communitiesuk/prsdb-webapp/actions/runs/{0}', github.run_id) }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
